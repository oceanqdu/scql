# Copyright 2025 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

parameters:
  run_go_ut:
    type: boolean
    default: false
  run_cpp_ut:
    type: boolean
    default: false

commands:
  setup_go_test:
    steps:
      - restore_cache:
          keys:
            - v1-linux-go-modules-{{ checksum "go.sum" }}
      - run:
          name: "Tidy and Download Go Modules"
          command: |
            go mod tidy
            go mod download
      - save_cache:
          key: v1-linux-go-modules-{{ checksum "go.sum" }}
          paths:
            - /usr/local/pkg/mod

  setup_cpp_test:
    steps:
      - run:
          name: "Checkout devtools"
          command: git clone --depth=1 https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup BuildBuddy Cache
          command: ../devtools/bazel_cache_setup.py

  run_go_test:
    description: "Run go tests"
    steps:
      - run:
          name: "Go Test"
          command: |
            set +e
            echo "Running unit tests..."
            go test -mod=readonly -timeout=30m -v -short ./pkg/... ./contrib/...

  run_cpp_test:
    description: "Run cpp tests and collect artifacts on fail"
    steps:
      - run:
          name: "Cpp Test"
          command: |
            set +e
            declare -i test_status

            echo "Running unit tests..."
            bazelisk --host_jvm_args=-Xmx8g test //engine/... \
                -c opt \
                --jobs=auto \
                --ui_event_filters=-info,-debug,-warning \
                --test_output=errors | tee test_result.log

            # Capture the exit status of the Bazel command
            test_status=${PIPESTATUS[0]}

            sh ../devtools/rename-junit-xml.sh
            if [ ${test_status} -ne 0 ]; then
              echo "Tests failed. Archiving binaries and logs..."
              find bazel-bin/ -executable -type f -name "*_test" -print0 | xargs -0 tar -cvzf test_binary.tar.gz
              find bazel-testlogs/ -type f -name "test.log" -print0 | xargs -0 tar -cvzf test_logs.tar.gz
            fi

            exit ${test_status}

jobs:
  linux_go_ut:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: "large"
    steps:
      - checkout
      - setup_go_test
      - run_go_test

  linux_cpp_ut:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: "2xlarge"
    steps:
      - checkout
      - setup_cpp_test
      - run_cpp_test
      - store_test_results:
          path: test-results
      - store_artifacts:
          when: on_fail
          path: test_binary.tar.gz
      - store_artifacts:
          when: on_fail
          path: test_logs.tar.gz

workflows:
  run_go_ut:
    when: << pipeline.parameters.run_go_ut >>
    jobs:
      - linux_go_ut

  run_cpp_ut:
    when: << pipeline.parameters.run_cpp_ut >>
    jobs:
      - linux_cpp_ut
