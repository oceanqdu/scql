# file: .circleci/debug-config.yml

version: 2.1

orbs:
  codecov: codecov/codecov@5.4.3

commands:
  run_go_test:
    description: "Run go tests and generate coverage profile for Codecov"
    steps:
      - run:
          name: "Go Test with Coverage"
          command: |
            set +e
            go mod tidy
            go test -timeout=30m -v -short -coverprofile=coverage.out ./pkg/... ./contrib/...

  run_cpp_test:
    description: "Run cpp tests and collect coverage for Codecov"
    steps:
      - run:
          name: "Cpp Test and Coverage"
          command: |
            set +e
            declare -i test_status
            bazelisk --host_jvm_args=-Xmx8g coverage //engine/... --nocache_test_results --combined_report=lcov --jobs=32 --ui_event_filters=-info,-debug,-warning --test_output=errors | tee test_result.log; test_status=${PIPESTATUS[0]}
            exit ${test_status}

  setup_cpp_test:
    steps:
      - run:
          name: "Checkout devtools"
          command: git clone https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup GCS
          command: |
            echo ${gcs_content} > ../gcs.data
            ../devtools/bazel_cache_setup.py --in_file=../gcs.data --out_file=../gcs.json --min_download

jobs:
  # 这里包含了我们所有的 job 定义
  go_test_job:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: 2xlarge
    steps:
      - checkout
      - run: { name: "Install GPG", command: "apt-get update && apt-get install -y gnupg" }
      - run_go_test
      - run:
          name: "Debug: Inspect Go Coverage Report"
          command: |
            echo "--- Checking Go coverage file existence and size ---"
            ls -lh coverage.out
            echo "--- Printing first 20 lines of Go coverage file ---"
            head -n 20 coverage.out
      - codecov/upload:
          files: coverage.out
          flags: go-linux-debug

  cpp_test_job:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: 2xlarge
    steps:
      - checkout
      - run: { name: "Install GPG", command: "apt-get update && apt-get install -y gnupg" }
      - setup_cpp_test
      - run_cpp_test
      - run:
          name: "Debug: Inspect Coverage Report File"
          command: |
            echo "--- Checking coverage file existence and size ---"
            ls -lh bazel-out/_coverage/_coverage_report.dat
            echo "--- Printing first 20 lines of coverage file ---"
            head -n 20 bazel-out/_coverage/_coverage_report.dat
            echo "--- Printing last 20 lines of coverage file ---"
            tail -n 20 bazel-out/_coverage/_coverage_report.dat
      - codecov/upload:
          files: bazel-out/_coverage/_coverage_report.dat
          flags: cpp-linux-debug

workflows:
  debug_workflow:
    jobs:
      - go_test_job
      - cpp_test_job